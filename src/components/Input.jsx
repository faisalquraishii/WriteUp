/*This is a reusable component that represents an input field (used in Login and Signup component to take user input) */
import React, {useId} from 'react'

const Input = React.forwardRef( function Input({
    label,
    type = "text",
    className = "",
    ...props
}, ref){ 
    const id = useId()
    return (
        <div className='w-full'>
            {label && <label //agar label diya hai toh hi label component display hoga.
            className='inline-block mb-1 pl-1' 
            htmlFor={id}>
                {label}
            </label>
            }
            <input //input element
            type={type}
            className={`px-3 py-2 rounded-lg bg-white text-black outline-none focus:bg-gray-50 duration-200 border border-gray-200 w-full ${className}`}
            ref={ref} /*By doing this, any ref passed to the Input component from its parent will be 
            forwarded and attached to the input element, allowing parent components to access and 
            interact with it. */
            {...props}
            id={id}
            />
        </div> //display label element only when label is true.
/*The htmlFor attribute in the <label> tag associates the label with the input field. When you click 
on the label, it focuses on the associated input field automatically. It does this by matching the 
value of the htmlFor attribute with the id of the input field it's meant to label. --> useful for 
accessibility purpose.

--> A unique id is generated by using useId() for every instance of input component
*/
    )
})

export default Input

/*When you spread the register function from React Hook Form into the Input component props, 
it includes a ref internally. The register function handles the registration of the input field 
with React Hook Form, including setting up validation rules and connecting the input field to the 
form's internal state.

Because the Input component uses forwardRef, any ref passed to it, whether directly or as part of 
another prop like register, will be forwarded to the underlying input element automatically. This 
allows the input element to be controlled and accessed from outside the Input component, such as 
in your Login component where you're handling form submission logic.
*/


